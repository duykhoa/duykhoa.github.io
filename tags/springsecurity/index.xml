<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Springsecurity on Kevin's Blog</title><link>https://duykhoa.github.io/tags/springsecurity/</link><description>Recent content in Springsecurity on Kevin's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>duykhoa12t[at]gmail[dot]com (Kevin Tran)</managingEditor><webMaster>duykhoa12t[at]gmail[dot]com (Kevin Tran)</webMaster><copyright>Kevin Tran</copyright><lastBuildDate>Mon, 05 Feb 2024 08:07:22 -0500</lastBuildDate><atom:link href="https://duykhoa.github.io/tags/springsecurity/index.xml" rel="self" type="application/rss+xml"/><item><title>User Authentication With Springboot using local database</title><link>https://duykhoa.github.io/posts/user-authentication-with-springboot/</link><pubDate>Mon, 05 Feb 2024 08:07:22 -0500</pubDate><author>duykhoa12t[at]gmail[dot]com (Kevin Tran)</author><guid>https://duykhoa.github.io/posts/user-authentication-with-springboot/</guid><description>&lt;p>This post explains how to configure the spring security for your app to support user authentication using local database.&lt;/p></description><content:encoded><![CDATA[<p>This post explains how to configure the spring security for your app to support user authentication using local database.</p>
<h1 id="introduction">Introduction</h1>
<p>In Spring Boot, there is no plug-and-play like other frameworks. To get the user authentication working, you need to write some code to glue the required components working together. Spring Security was designed to be flexible with multiple authentication/authorization strategies.</p>
<h1 id="overview-design">Overview design</h1>
<h2 id="servlet-filter-chains">Servlet Filter chains</h2>
<p><img src="filterchain.png" alt="filterchain.png"></p>
<p><em>source from <a href="https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html">SpringIO</a></em></p>
<p>Here is an example of configuring the security filter</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@EnableWebSecurity</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SecurityConfig</span> {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> SecurityFilterChain <span style="color:#a6e22e">filterChain</span>(HttpSecurity httpSecurity) <span style="color:#66d9ef">throws</span> Exception {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> httpSecurity
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">authorizeHttpRequests</span>(authorize <span style="color:#f92672">-&gt;</span> authorize
</span></span><span style="display:flex;"><span>                        .<span style="color:#a6e22e">requestMatchers</span>(<span style="color:#e6db74">&#34;/demo/default&#34;</span>)
</span></span><span style="display:flex;"><span>                        .<span style="color:#a6e22e">permitAll</span>()
</span></span><span style="display:flex;"><span>                        .<span style="color:#a6e22e">anyRequest</span>()
</span></span><span style="display:flex;"><span>                        .<span style="color:#a6e22e">authenticated</span>()
</span></span><span style="display:flex;"><span>                ).<span style="color:#a6e22e">csrf</span>(AbstractHttpConfigurer::disable)
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">httpBasic</span>(Customizer.<span style="color:#a6e22e">withDefaults</span>())
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">build</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>With this security configuration, the application permits unrestricted access to the &ldquo;/demo/default&rdquo; path, while other paths require basic authentication. By specifying <code>httpBasic</code> configuration, it expects the <code>Authorization</code> header alongside the Basic authentication strategy, adhering to the format <code>Basic xxxxx</code>.</p>
<h2 id="create-custom-implementation-of-userdetailsservice-interface">Create custom implementation of UserDetailsService interface</h2>
<p>This service is the core service to load the user information, this has an abstract method to load the user by username (<code>loadUserByUsername</code>). The service is a dependency of <code>DaoAuthenticationProvider</code>, which handles the authentication logic.</p>
<p><img src="DaoAuthenticationProvider.png" alt="DaoAuthenticationProvider.png"></p>
<p>The <a href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/dao-authentication-provider.html">Spring documentation</a> provides a detailed explanation of how these components are interconnected to execute the authentication logic using username and password.</p>
<p>By implementing the UserDetailsService, we can specify how SpringSecurity will fetch the user information from the local database.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Service</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CustomUserDetailsService</span> <span style="color:#66d9ef">implements</span> UserDetailsService {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> AccountRepository accountRepository;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">CustomUserDetailsService</span>(AccountRepository accountRepository) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">accountRepository</span> <span style="color:#f92672">=</span> accountRepository;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> UserDetails <span style="color:#a6e22e">loadUserByUsername</span>(String email) <span style="color:#66d9ef">throws</span> UsernameNotFoundException {
</span></span><span style="display:flex;"><span>        Account account <span style="color:#f92672">=</span> accountRepository.<span style="color:#a6e22e">findByEmail</span>(email);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (account <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> UsernameNotFoundException(<span style="color:#e6db74">&#34;account not found&#34;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        List<span style="color:#f92672">&lt;</span>GrantedAuthority<span style="color:#f92672">&gt;</span> grantedAuthorities <span style="color:#f92672">=</span> AuthorityUtils
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">createAuthorityList</span>(account.<span style="color:#a6e22e">getRoles</span>().<span style="color:#a6e22e">stream</span>().<span style="color:#a6e22e">map</span>(Role::getName).<span style="color:#a6e22e">toList</span>());
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> UserDetailsImpl
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">builder</span>()
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">id</span>(account.<span style="color:#a6e22e">getId</span>())
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">email</span>(account.<span style="color:#a6e22e">getEmail</span>())
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">password</span>(account.<span style="color:#a6e22e">getEncodedPassword</span>())
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">enabled</span>(account.<span style="color:#a6e22e">getEnabled</span>())
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">credentialsExpiredAt</span>(account.<span style="color:#a6e22e">getCredentialsExpiredAt</span>())
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">expiredAt</span>(account.<span style="color:#a6e22e">getExpiredAt</span>())
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">lockedAt</span>(account.<span style="color:#a6e22e">getLockedAt</span>())
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">createdAt</span>(account.<span style="color:#a6e22e">getCreatedAt</span>())
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">updatedAt</span>(account.<span style="color:#a6e22e">getUpdatedAt</span>())
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">authorityList</span>(grantedAuthorities)
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">build</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>The <code>CustomUserDetailsService</code> implements the <code>UserDetailsService</code>, which is an interface defined by <code>SpringSecurity</code>. It override the <code>loadUserByUsername</code> function by fetching the <code>account</code> using the repository.
After the account is found, the service builds the authorities list by looking at the <code>roles</code> association.</p>
<p>In this demo, the relationship between <code>Account</code> and <code>Role</code> is many-to-many, as an account can have many roles, and a role could be attached to multiple accounts. In SpringSecurity, beside roles, there are different terminologies for granted authorities, such as <code>scopes</code> and <code>groups</code>.</p>
<p>The <code>UserDetailsImpl</code> is a java class that implements the Spring <code>UserDetails</code> interface. The implement could look like following</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@SuperBuilder</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@AllArgsConstructor</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UserDetailsImpl</span> <span style="color:#66d9ef">extends</span> Account <span style="color:#66d9ef">implements</span> UserDetails {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> List<span style="color:#f92672">&lt;</span>GrantedAuthority<span style="color:#f92672">&gt;</span> authorityList;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> Collection<span style="color:#f92672">&lt;?</span> <span style="color:#66d9ef">extends</span> GrantedAuthority<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getAuthorities</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> Collections.<span style="color:#a6e22e">unmodifiableList</span>(authorityList);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">getUsername</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> getEmail();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">isAccountNonExpired</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> getExpiredAt() <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">||</span> getExpiredAt().<span style="color:#a6e22e">isBefore</span>(Instant.<span style="color:#a6e22e">now</span>());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">isAccountNonLocked</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> getLockedAt() <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">isCredentialsNonExpired</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> getCredentialsExpiredAt() <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">||</span> getCredentialsExpiredAt().<span style="color:#a6e22e">isBefore</span>(Instant.<span style="color:#a6e22e">now</span>());
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">isEnabled</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> getEnabled();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>In this implementation, I use some columns in the <code>accounts</code> table like <code>expiredAt</code>. In real project, these logic can be implemented differently based on the project requirements.</p>
<h2 id="encoded-password">Encoded password</h2>
<p>In Java, we can use PasswordEncoder to encode and check if the provided password is matched with the encoded password, here is a sample code to create the encoder and call its behaviors</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    PasswordEncoder encoder <span style="color:#f92672">=</span> PasswordEncoderFactories.<span style="color:#a6e22e">createDelegatingPasswordEncoder</span>();
</span></span><span style="display:flex;"><span>    String encodedPassword <span style="color:#f92672">=</span> encoder.<span style="color:#a6e22e">encode</span>(<span style="color:#e6db74">&#34;password&#34;</span>); <span style="color:#75715e">// the value of encodedPassword is &#34;{bcrypt}$2a$10$tBC.TeiMDcNt8rBHeqB6.eFg5Yb6HxlRy7RapEyxLM9ZEhV4fDZAq&#34;;</span>
</span></span><span style="display:flex;"><span>    String rawPassword <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;password&#34;</span>;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">boolean</span> isMatched <span style="color:#f92672">=</span> encoder.<span style="color:#a6e22e">matches</span>(rawPassword, encodedPassword);
</span></span><span style="display:flex;"><span>    assertTrue(isMatched);</span></span></code></pre></div><p>Both encoding and decoding would require the password encoder, it is a good idea to define a bean for it. SpringSecurity looks for the bean automatically. Hence the full configuration would look like following</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@EnableMethodSecurity</span>()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SecConfiguration</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> PasswordEncoder <span style="color:#a6e22e">passwordEncoder</span>(){
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> PasswordEncoderFactories.<span style="color:#a6e22e">createDelegatingPasswordEncoder</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> SecurityFilterChain <span style="color:#a6e22e">filterChain</span>(HttpSecurity httpSecurity) <span style="color:#66d9ef">throws</span> Exception {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> httpSecurity
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">authorizeHttpRequests</span>(authorize <span style="color:#f92672">-&gt;</span> authorize
</span></span><span style="display:flex;"><span>                        .<span style="color:#a6e22e">requestMatchers</span>(<span style="color:#e6db74">&#34;/demo/default&#34;</span>)
</span></span><span style="display:flex;"><span>                        .<span style="color:#a6e22e">permitAll</span>()
</span></span><span style="display:flex;"><span>                        .<span style="color:#a6e22e">anyRequest</span>()
</span></span><span style="display:flex;"><span>                        .<span style="color:#a6e22e">authenticated</span>()
</span></span><span style="display:flex;"><span>                ).<span style="color:#a6e22e">csrf</span>(AbstractHttpConfigurer::disable)
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">httpBasic</span>(Customizer.<span style="color:#a6e22e">withDefaults</span>())
</span></span><span style="display:flex;"><span>                .<span style="color:#a6e22e">build</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><h2 id="controller">Controller</h2>
<p>After configuring the entire authentication logic, we can finally create a controller to test if the code works correctly</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Conditional</span>(IsDevEnvCondition.<span style="color:#a6e22e">class</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@RestController</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@RequestMapping</span>(<span style="color:#e6db74">&#34;/demo&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DevAuthenticationController</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> SetupTestDataUsecase setupTestDataUsecase;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">DevAuthenticationController</span>(SetupTestDataUsecase setupTestDataUsecase) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">setupTestDataUsecase</span> <span style="color:#f92672">=</span> setupTestDataUsecase;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@GetMapping</span>(<span style="color:#e6db74">&#34;/admin/dashboard&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@PreAuthorize</span>(<span style="color:#e6db74">&#34;hasRole(&#39;ADMIN&#39;)&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">showAdminDashboard</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Successfully access admin dashboard&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@GetMapping</span>(<span style="color:#e6db74">&#34;/user/dashboard&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@PreAuthorize</span>(<span style="color:#e6db74">&#34;hasRole(&#39;USER&#39;)&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">showUserDashboard</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Successfully access User dashboard&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@GetMapping</span>(<span style="color:#e6db74">&#34;/superadmin/dashboard&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@PreAuthorize</span>(<span style="color:#e6db74">&#34;hasRole(&#39;SUPER_ADMIN&#39;)&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">showSuperAdminDashboard</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Successfully access Super Admin dashboard&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@GetMapping</span>(<span style="color:#e6db74">&#34;/default&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">showDefaultPage</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Without any authority, guest can see this page&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@PostMapping</span>(<span style="color:#e6db74">&#34;/superadmin/run-me-first&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@PreAuthorize</span>(<span style="color:#e6db74">&#34;hasRole(&#39;SUPER_ADMIN&#39;)&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">runMeFirst</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> setupTestDataUsecase.<span style="color:#a6e22e">execute</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>This <code>DevAuthenticationController</code> is only available in the dev environment by specifying the <code>@Conditional(IsDevEnvCondition.class)</code> annotation. This annotation is easy to write, I&rsquo;d skip to talk about it to focus on the controller activities.</p>
<p>We need to run the <code>/superadmin/run-me-first</code>, this will create the test data. When starting the application, only the super admin account is created. We would need other roles to perform different tests, hence this endpoint helps to create other testing accounts.</p>
<p>The <code>/default</code> path accepts all traffics, there is no restriction on this path due to previous configuration on the <code>SecConfiguration</code>. Other path requires the basic authentication and sufficient role to access the content, for instance the <code>/user/dashboard</code> requires the account to have the <code>USER</code> role.</p>
<p>As mentioned earlier, an account could have multiple roles, the <code>setupTestDataUsecase</code> creates some test accounts with several roles attached:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>    Account adminAccount <span style="color:#f92672">=</span> Account
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">builder</span>()
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">email</span>(<span style="color:#e6db74">&#34;admin@email.com&#34;</span>)
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">password</span>(<span style="color:#e6db74">&#34;password&#34;</span>)
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">enabled</span>(<span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">roles</span>(Set.<span style="color:#a6e22e">of</span>(adminRole))
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">build</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Account multiRolesAccount1 <span style="color:#f92672">=</span> Account
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">builder</span>()
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">email</span>(<span style="color:#e6db74">&#34;multiroles1@email.com&#34;</span>)
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">password</span>(<span style="color:#e6db74">&#34;password&#34;</span>)
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">enabled</span>(<span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">roles</span>(Set.<span style="color:#a6e22e">of</span>(userRole, adminRole))
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">build</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    Account multiRolesAccount2 <span style="color:#f92672">=</span> Account
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">builder</span>()
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">email</span>(<span style="color:#e6db74">&#34;multiroles2@email.com&#34;</span>)
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">password</span>(<span style="color:#e6db74">&#34;password&#34;</span>)
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">enabled</span>(<span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">roles</span>(Set.<span style="color:#a6e22e">of</span>(userRole, superAdminRole))
</span></span><span style="display:flex;"><span>            .<span style="color:#a6e22e">build</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//...</span>
</span></span><span style="display:flex;"><span>    accountRepository.<span style="color:#a6e22e">saveAll</span>(accounts);</span></span></code></pre></div><h2 id="running-the-app">Running the app</h2>
<p>First, we can run the app in the <code>Run</code> mode, and use the <code>http.request</code> collection to test each endpoint (ensure to run the &ldquo;/superadmin/run-me-first&rdquo; first).</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>### Run this request first to setup testing data
</span></span><span style="display:flex;"><span>POST {{ apiUrl }}/demo/superadmin/run-me-first
</span></span><span style="display:flex;"><span>Authorization: {{ authorization_token }}
</span></span><span style="display:flex;"><span>Accept: application/json
</span></span><span style="display:flex;"><span>Content-Type: application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>### /admin/dashboard returns 200
</span></span><span style="display:flex;"><span>GET {{ apiUrl }}/demo/admin/dashboard
</span></span><span style="display:flex;"><span>Authorization: Basic superadmin@email.com password
</span></span><span style="display:flex;"><span>Accept: application/json
</span></span><span style="display:flex;"><span>Content-Type: application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>### /user/dashboard returns 200
</span></span><span style="display:flex;"><span>GET {{ apiUrl }}/demo/user/dashboard
</span></span><span style="display:flex;"><span>Authorization: Basic user@email.com password
</span></span><span style="display:flex;"><span>Accept: application/json
</span></span><span style="display:flex;"><span>Content-Type: application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>### /user/dashboard with multi roles 1 returns 200
</span></span><span style="display:flex;"><span>GET {{ apiUrl }}/demo/admin/dashboard
</span></span><span style="display:flex;"><span>Authorization: Basic multiroles1@email.com password
</span></span><span style="display:flex;"><span>Accept: application/json
</span></span><span style="display:flex;"><span>Content-Type: application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>### /user/dashboard with multi roles 1 result 403
</span></span><span style="display:flex;"><span>GET {{ apiUrl }}/demo/superadmin/dashboard
</span></span><span style="display:flex;"><span>Authorization: Basic multiroles1@email.com password
</span></span><span style="display:flex;"><span>Accept: application/json
</span></span><span style="display:flex;"><span>Content-Type: application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>### /user/dashboard with multi roles 2
</span></span><span style="display:flex;"><span>GET {{ apiUrl }}/demo/user/dashboard
</span></span><span style="display:flex;"><span>Authorization: Basic multiroles2@email.com password
</span></span><span style="display:flex;"><span>Accept: application/json
</span></span><span style="display:flex;"><span>Content-Type: application/json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>### /default no authorization required
</span></span><span style="display:flex;"><span>GET {{ apiUrl }}/demo/default
</span></span><span style="display:flex;"><span>Accept: application/json
</span></span><span style="display:flex;"><span>Content-Type: application/json</span></span></code></pre></div><p>After that, we could run the app in debugger mode, here are my breakpoints for your preferences</p>
<ul>
<li><code>DaoAuthenticationProvider</code>, function <code>retrieveUser</code> and <code>additionalAuthenticationChecks</code></li>
<li><code>SecurityExpressionRoot</code>, function <code>hasRole</code> and <code>hasAnyAuthorityName</code></li>
</ul>
<p>Both classes mentioned here are located under SpringSecurity library, you can find them in the external libraries section, the path is <code>org/springframework/security/authentication/dao/DaoAuthenticationProvider.class</code>.</p>
<p>When sending the request from the <code>http request</code> above, the debugger stops at the <code>DaoAuthenticationProvider#retrieveUser</code>.
Since the <code>UserDetailsService</code> is a dependency of <code>DaoAuthenticationProvider</code>, we can check if our implementation for the <code>CustomUserDetailsService#loadUserByUsername</code> works correctly.
<img src="debugLoadedUser.png" alt="debugLoadedUser.png"></p>
<p>This screenshot shows a lot of useful information, for example the data type of the <code>principal</code>, <code>credential</code>, etc. which helps us to understand SpringSecurity better.</p>
<p><img src="spring-security-authentication-design.png" alt="spring-security-authentication-design.png"></p>
<p>We also see the <code>UserDetailsServices</code> has been used in the <code>DaoAuthenticationProvider</code> and it returns the <code>loadedUser</code> in type <code>UserDetailsImpl</code> correctly from the database.</p>
<p>And this screenshot shows how the <code>hasRole</code> annotation works, this annotation is used in the controller to check if the principal has sufficient authority to access the endpoint.</p>
<p><img src="debugHasRole.png" alt="debugHasRole.png"></p>
<p>The code for the <code>hasRole</code> function is implemented in SpringSecurity as following:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">hasRole</span>(String role) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> hasAnyRole(role);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">hasAnyRole</span>(String... roles) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> hasAnyAuthorityName(<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">defaultRolePrefix</span>, roles);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">hasAnyAuthorityName</span>(String prefix, String... roles) {
</span></span><span style="display:flex;"><span>    Set<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">&gt;</span> roleSet <span style="color:#f92672">=</span> getAuthoritySet();
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (String role : roles) {
</span></span><span style="display:flex;"><span>        String defaultedRole <span style="color:#f92672">=</span> getRoleWithDefaultPrefix(prefix, role);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (roleSet.<span style="color:#a6e22e">contains</span>(defaultedRole)) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div><p>This <code>hasAnyAuthorityName</code> invokes a utility function <code>getRoleWithDefaultPrefix</code>, that function takes the <code>prefix</code> (ROLE_) and appends the role value (loaded from the account roles table) to construct the <code>defaultRole</code>, hence the role value in database can omit the <code>ROLE_</code> prefix.</p>
<h1 id="conclusion">Conclusion</h1>
<p>This post is a short tutorial of how to connect the SpringSecurity with the local database credentials provider to authenticate and authorize the request. Through this post, my aim is to guide you how to navigate the SpringSecurity source code using debugger tool, which I believe is an invaluable method for gaining a deeper understanding of its design. By grasping the intricacies of its structure, not only does development become more streamlined, but troubleshooting also becomes significantly more efficient.
The example repository can be found in <a href="https://github.com/duykhoa/sec">Github</a>.</p>
<p>Thanks for reading!</p>]]></content:encoded></item></channel></rss>