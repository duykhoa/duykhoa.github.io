<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Springsecurity on Kevin Tran</title><link>https://duykhoa.github.io/tags/springsecurity/</link><description>Recent content in Springsecurity on Kevin Tran</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 05 Feb 2024 08:07:22 -0500</lastBuildDate><atom:link href="https://duykhoa.github.io/tags/springsecurity/index.xml" rel="self" type="application/rss+xml"/><item><title>User Authentication With Springboot using local database</title><link>https://duykhoa.github.io/posts/user-authentication-with-springboot/</link><pubDate>Mon, 05 Feb 2024 08:07:22 -0500</pubDate><guid>https://duykhoa.github.io/posts/user-authentication-with-springboot/</guid><description>This post is a short tutorial of how to configure the spring security for your app to support user authentication using local database.
Introduction ðŸ”—In Spring Boot, there is no plug-and-play like other frameworks. To get the user authentication working, you need to write some code to glue the required components working together. Spring Security was designed to be flexible with multiple authentication/authorization strategies.
Overview design ðŸ”—Authentication architecture ðŸ”— source from SpringIO</description></item></channel></rss>